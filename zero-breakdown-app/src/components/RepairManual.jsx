import { useState } from 'react'
import axios from 'axios'
import ReactMarkdown from 'react-markdown'
import './RepairManual.css'
import { FaTools } from 'react-icons/fa'
import { IoHelpCircle } from 'react-icons/io5'
import { HiBookOpen } from 'react-icons/hi'
import { BiLoaderAlt } from 'react-icons/bi'

const API_URL = 'http://localhost:8000'

function RepairManual() {
  const [question, setQuestion] = useState('')
  const [conversations, setConversations] = useState([
    {
      question: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö',
      answer: '# üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö Feed Mill\n\n**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:**\n- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå\n- ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ bearing ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢\n- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå\n- ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á\n- ‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô\n\n‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!'
    }
  ])
  const [loading, setLoading] = useState(false)

  const askQuestion = async () => {
    if (!question.trim()) return

    setLoading(true)
    setConversations(prev => [...prev, { question, answer: null }])
    const currentQuestion = question
    setQuestion('')

    try {
      const response = await axios.post(`${API_URL}/api/repair-manual`, {
        message: currentQuestion
      })

      setConversations(prev =>
        prev.map((conv, idx) =>
          idx === prev.length - 1
            ? { ...conv, answer: response.data.answer }
            : conv
        )
      )
    } catch (error) {
      setConversations(prev =>
        prev.map((conv, idx) =>
          idx === prev.length - 1
            ? { ...conv, answer: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.response?.data?.detail || error.message}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Backend API ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà` }
            : conv
        )
      )
    } finally {
      setLoading(false)
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      askQuestion()
    }
  }

  const quickQuestions = [
    '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå',
    '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ bearing ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢',
    '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå',
    '‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á',
    '‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô'
  ]

  return (
    <div className="repair-manual-container">
      <h2><FaTools style={{ marginRight: '0.5rem', verticalAlign: 'middle' }} />‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á</h2>
      <p className="description">
        ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
      </p>

      <div className="quick-questions">
        <strong>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏°‡∏ö‡πà‡∏≠‡∏¢:</strong>
        <div className="quick-buttons">
          {quickQuestions.map((q, idx) => (
            <button
              key={idx}
              onClick={() => setQuestion(q)}
              className="quick-button"
              disabled={loading}
            >
              {q}
            </button>
          ))}
        </div>
      </div>

      <div className="manual-conversations">
        {conversations.map((conv, idx) => (
          <div key={idx} className="conversation-block">
            {conv.question !== '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö' && (
              <div className="question-block">
                <div className="question-header">
                  <strong>‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:</strong>
                </div>
                <div className="question-content">{conv.question}</div>
              </div>
            )}

            {conv.answer ? (
              <div className="answer-block">
                <div className="answer-header">
                  <strong>üìö ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:</strong>
                </div>
                <div className="answer-content">
                  <ReactMarkdown>{conv.answer}</ReactMarkdown>
                </div>
              </div>
            ) : (
              <div className="answer-block loading">
                <div className="answer-header">
                  <strong>üìö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...</strong>
                </div>
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      <div className="manual-input-container">
        <div className="input-wrapper">
          <button className="attach-button" title="Attach file">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"/>
            </svg>
          </button>
          <input
            type="text"
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Start typing"
            disabled={loading}
            className="manual-input"
          />
          <button
            className="send-button"
            onClick={askQuestion}
            disabled={loading || !question.trim()}
            title="Send message"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <line x1="22" y1="2" x2="11" y2="13"></line>
              <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
            </svg>
          </button>
        </div>
      </div>
    </div>
  )
}

export default RepairManual