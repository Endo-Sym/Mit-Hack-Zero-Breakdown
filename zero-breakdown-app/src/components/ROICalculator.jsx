import { useState } from 'react'
import axios from 'axios'
import ReactMarkdown from 'react-markdown'
import './ROICalculator.css'
import { FaCalculator } from 'react-icons/fa'
import { MdAnalytics } from 'react-icons/md'
import { BiLoaderAlt } from 'react-icons/bi'
import { IoCheckmarkCircle, IoWarning } from 'react-icons/io5'

const API_URL = 'http://localhost:8000'

function ROICalculator() {
  const [formData, setFormData] = useState({
    current_health_percentage: 70,
    comparison_health_percentage: 50,
    repair_cost: 50000,
    daily_production_value: 100000
  })
  const [result, setResult] = useState(null)
  const [loading, setLoading] = useState(false)

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: parseFloat(value) || 0 }))
  }

  const calculateROI = async () => {
    setLoading(true)
    try {
      const response = await axios.post(`${API_URL}/api/calculate-roi`, formData)
      setResult(response.data)
    } catch (error) {
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.response?.data?.detail || error.message}`)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="roi-calculator-container">
      <h2><FaCalculator style={{ marginRight: '0.5rem', verticalAlign: 'middle' }} />‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ROI (Return on Investment)</h2>
      <p className="description">
        ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
      </p>

      <div className="form-section">
        <div className="form-row">
          <label>
            <strong>‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (%):</strong>
            <input
              type="number"
              min="0"
              max="100"
              step="1"
              value={formData.current_health_percentage}
              onChange={(e) => handleInputChange('current_health_percentage', e.target.value)}
            />
            <small>0-100% (100% = ‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)</small>
          </label>

          <label>
            <strong>‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (%):</strong>
            <input
              type="number"
              min="0"
              max="100"
              step="1"
              value={formData.comparison_health_percentage}
              onChange={(e) => handleInputChange('comparison_health_percentage', e.target.value)}
            />
            <small>‡∏ñ‡πâ‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ</small>
          </label>
        </div>

        <div className="form-row">
          <label>
            <strong>‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó):</strong>
            <input
              type="number"
              min="0"
              step="1000"
              value={formData.repair_cost}
              onChange={(e) => handleInputChange('repair_cost', e.target.value)}
            />
          </label>

          <label>
            <strong>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡∏ö‡∏≤‡∏ó):</strong>
            <input
              type="number"
              min="0"
              step="1000"
              value={formData.daily_production_value}
              onChange={(e) => handleInputChange('daily_production_value', e.target.value)}
            />
          </label>
        </div>

        <button onClick={calculateROI} disabled={loading} className="btn-calculate">
          {loading ? (
            <><BiLoaderAlt className="spin-icon" /> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì...</>
          ) : (
            <><FaCalculator style={{ marginRight: '0.5rem' }} /> ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ROI</>
          )}
        </button>
      </div>

      {result && (
        <div className="result-section">
          <h3><MdAnalytics style={{ marginRight: '0.5rem' }} />‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ROI</h3>

          <div className="comparison-grid">
            <div className="scenario-box current">
              <h4>üîπ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({result.current_scenario.health_percentage}%)</h4>
              <div className="stat-row">
                <span>‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢:</span>
                <strong>{result.current_scenario.days_until_breakdown} ‡∏ß‡∏±‡∏ô</strong>
              </div>
              <div className="stat-row">
                <span>‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢:</span>
                <strong className="loss">{result.current_scenario.production_loss.toLocaleString()} ‡∏ö‡∏≤‡∏ó</strong>
              </div>
            </div>

            <div className="scenario-box comparison">
              <h4>üî∏ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ({result.comparison_scenario.health_percentage}%)</h4>
              <div className="stat-row">
                <span>‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢:</span>
                <strong>{result.comparison_scenario.days_until_breakdown} ‡∏ß‡∏±‡∏ô</strong>
              </div>
              <div className="stat-row">
                <span>‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢:</span>
                <strong className="loss">{result.comparison_scenario.production_loss.toLocaleString()} ‡∏ö‡∏≤‡∏ó</strong>
              </div>
            </div>
          </div>

          <div className="roi-summary">
            <div className="roi-box">
              <div className="roi-stat">
                <label>‡∏Ñ‡πà‡∏≤‡∏ã‡πà‡∏≠‡∏°:</label>
                <span className="cost">{result.repair_cost.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
              </div>
              <div className="roi-stat">
                <label>‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏î‡πâ:</label>
                <span className={result.savings >= 0 ? 'savings' : 'loss'}>
                  {result.savings.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                </span>
              </div>
              <div className="roi-stat highlight">
                <label>ROI:</label>
                <span className={result.roi_percentage >= 0 ? 'positive' : 'negative'}>
                  {result.roi_percentage.toFixed(2)}%
                </span>
              </div>
            </div>
          </div>

          <div className="analysis-box">
            <h4>üí° ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h4>
            <ReactMarkdown>{result.analysis}</ReactMarkdown>
          </div>

          <div className="recommendation-badge">
            {result.roi_percentage > 0 ? (
              <div className="badge-positive">
                <IoCheckmarkCircle style={{ marginRight: '0.5rem' }} />‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡πà‡∏≠‡∏°‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (ROI ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å)
              </div>
            ) : (
              <div className="badge-negative">
                <IoWarning style={{ marginRight: '0.5rem' }} />‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡πà‡∏≠‡∏°‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (ROI ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö)
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  )
}

export default ROICalculator