# Zero Breakdown Prediction System Configuration

project:
  name: Mit-Hack-Zero-Breakdown
  description: AI-powered predictive maintenance system for factory machines
  version: 1.0.0

architecture:
  frontend:
    framework: React + Vite
    port: 5173
    build_command: npm run dev
    build_output: dist
    dependencies:
      - react: ^18.2.0
      - react-router-dom: ^6.20.0
      - axios: ^1.6.2
      - recharts: ^2.10.3
      - react-gauge-chart: ^0.4.1
      - react-icons: ^4.12.0

  backend:
    framework: FastAPI
    port: 8000
    runtime: Python 3.11
    main_file: main.py
    dependencies:
      - fastapi: 0.104.1
      - uvicorn: 0.24.0
      - boto3: 1.29.7
      - pandas: 2.1.3
      - numpy: 1.26.2
      - pymupdf: 1.23.8

services:
  api_endpoints:
    - path: /api/upload-csv
      method: POST
      description: Upload factory CSV data
      accepts: multipart/form-data
      parameters:
        - file: CSV file
        - custom_name: Optional filename

    - path: /api/upload-pdf
      method: POST
      description: Upload PDF manual and create embeddings
      accepts: multipart/form-data

    - path: /api/chat
      method: POST
      description: AI chat interface
      model: qwen.qwen3-32b-v1:0

    - path: /api/repair-manual
      method: POST
      description: Repair manual Q&A
      model: qwen.qwen3-32b-v1:0

    - path: /api/predict-breakdown
      method: POST
      description: Machine breakdown prediction
      model: claude-3-haiku

    - path: /api/embeddings
      method: GET
      description: List all embedding files

storage:
  csv_data: /opt/dlami/nvme/csv_data
  embeddings: /opt/dlami/nvme/embeddings

aws_services:
  bedrock:
    region: us-west-2
    models:
      - amazon.titan-embed-text-v2:0
      - us.anthropic.claude-3-haiku-20240307-v1:0
      - qwen.qwen3-32b-v1:0

deployment:
  docker:
    compose_file: docker-compose.yml
    services:
      - backend
      - frontend
    volumes:
      - csv_data
      - embeddings_data

  development:
    backend_command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    frontend_command: npm run dev -- --host

  production:
    backend_command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4
    frontend_command: npm run build && npm run preview

environment_variables:
  required:
    - AWS_REGION
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
  optional:
    - VITE_API_URL

features:
  - Real-time sensor monitoring
  - AI-powered breakdown prediction
  - RAG-based repair manual system
  - CSV data upload with custom naming
  - PDF manual embedding generation
  - Glassmorphism UI design
  - LocalStorage state persistence